@page "/sessions"
@using AIStorm.Core.Models
@using AIStorm.Core.Storage
@using Microsoft.Extensions.Logging
@using AIStorm.Server.Shared
@inject IStorageProvider StorageProvider
@inject ILogger<SessionsOverview> Logger

<PageTitle>Sessions & Agent Templates - AIStorm</PageTitle>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Sessions</h5>
                    <a href="/session-editor" class="btn btn-sm btn-primary">Create New Session</a>
                </div>
                <div class="list-group list-group-flush p-3">
                    @if (loadingSessions)
                    {
                        <div class="text-center py-3">
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            Loading sessions...
                        </div>
                    }
                    else if (sessions.Count == 0)
                    {
                        <div class="text-center py-3">
                            <em>No sessions available</em>
                        </div>
                    }
                    else
                    {
                        @foreach (var session in sessions)
                        {
                            <SessionCard 
                                Session="@session"
                                OnSelected="@OnSessionSelected" />
                        }
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Agent Templates</h5>
                    <a href="/agent-editor" class="btn btn-sm btn-primary">Create New Agent</a>
                </div>
                <div class="list-group list-group-flush p-3">
                    @if (loadingAgents)
                    {
                        <div class="text-center py-3">
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            Loading agent templates...
                        </div>
                    }
                    else if (agents.Count == 0)
                    {
                        <div class="text-center py-3">
                            <em>No agent templates available</em>
                        </div>
                    }
                    else
                    {
                        @foreach (var agent in agents)
                        {
                            <AgentCard 
                                Agent="@agent" 
                                ShowPrompt="true"
                                ShowEditButton="true"
                                OnSelected="@OnAgentSelected" />
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private IReadOnlyList<Session> sessions = new List<Session>();
    private IReadOnlyList<Agent> agents = new List<Agent>();
    private bool loadingSessions = true;
    private bool loadingAgents = true;
    
    private void OnAgentSelected(Agent agent)
    {
        // You can implement agent selection logic here if needed
        // For now, this is a placeholder for future functionality
    }
    
    private void OnSessionSelected(Session session)
    {
        // You can implement session selection logic here if needed
        // For now, this is a placeholder for future functionality
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("Loading all sessions and agent templates");
            
            // Load data in parallel
            var sessionsTask = Task.Run(() => StorageProvider.GetAllSessions());
            var agentsTask = Task.Run(() => StorageProvider.GetAllAgentTemplates());
            
            // Process results when both tasks complete
            await Task.WhenAll(sessionsTask, agentsTask);
            
            sessions = sessionsTask.Result;
            loadingSessions = false;
            
            agents = agentsTask.Result;
            loadingAgents = false;
            
            Logger.LogInformation("Loaded {SessionCount} sessions and {AgentCount} agent templates", 
                sessions.Count, agents.Count);
        }
        catch (Exception ex)
        {
            // Handle errors
            Logger.LogError(ex, "Error loading sessions or agent templates: {ErrorMessage}", ex.Message);
            loadingSessions = false;
            loadingAgents = false;
        }
    }
}
