@using AIStorm.Core.Models
@using AIStorm.Server.Shared

<div class="agent-card" style="@GetColorStyle()">
    <AistormCard 
        Title="@Agent.Name"
        Subtitle="@GetAgentSubtitle()"
        StatusClass="@GetStatusClass()"
        CanExpand="@(ShowPrompt && !string.IsNullOrEmpty(Agent.SystemPrompt))"
        IsClickable="false">
        
        <MetadataContent>
            @if (!string.IsNullOrEmpty(Agent.AIModel))
            {
                <div class="metadata-tags">
                    <span class="tag service-type">@Agent.AIServiceType</span>
                    <span class="tag model-type">@Agent.AIModel</span>
                </div>
            }
        </MetadataContent>
        
        <ChildContent>
            <MarkdownView Content="@Agent.SystemPrompt" />
        </ChildContent>
        
        <ActionContent>
            @if (ShowEditButton)
            {
                <a href="/agent-editor/@Agent.Name" class="btn btn-outline-primary btn-sm">Edit Agent</a>
            }
        </ActionContent>
    </AistormCard>
</div>

@code {
    [Parameter]
    public Agent Agent { get; set; } = null!;

    [Parameter]
    public EventCallback<Agent> OnSelected { get; set; }

    [Parameter]
    public string? ColorIndicator { get; set; }
    
    [Parameter]
    public bool ShowPrompt { get; set; } = true;
    
    [Parameter]
    public bool ShowEditButton { get; set; } = false;
    
    private string GetAgentSubtitle()
    {
        return !string.IsNullOrEmpty(Agent.AIModel) 
            ? $"{Agent.AIServiceType} {Agent.AIModel}" 
            : string.Empty;
    }
    
    private string GetStatusClass()
    {
        // Only use status-neutral when no color is specified
        return string.IsNullOrEmpty(ColorIndicator) ? "status-neutral" : "";
    }
    
    private string GetColorStyle()
    {
        return !string.IsNullOrEmpty(ColorIndicator) 
            ? $"--agent-color: {ColorIndicator};" 
            : "";
    }
}
