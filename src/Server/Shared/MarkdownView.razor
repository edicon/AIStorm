@using Markdig
@using Markdig.Extensions.Bootstrap
@inherits ComponentBase

<div class="markdown-content @(IsInPreviewMode ? "preview" : "expanded")">
    @((MarkupString)RenderedContent)
    @if(IsInPreviewMode)
    {
        <div class="fade-overlay"></div>
    }
</div>

@code {
    [Parameter]
    public string Content { get; set; } = "";

    [Parameter]
    public bool Truncate { get; set; } = false;
    
    [Parameter]
    public int MaxLength { get; set; } = 100;
    
    [Parameter]
    public bool IsPreview { get; set; } = true;
    
    [CascadingParameter(Name = "CardIsExpanded")]
    public bool? CardIsExpanded { get; set; }
    
    // If CardIsExpanded is provided (from AistormCard), use it; otherwise, use the parameter
    private bool IsInPreviewMode => CardIsExpanded.HasValue ? !CardIsExpanded.Value : IsPreview;
    
    private string RenderedContent => RenderMarkdown(ProcessContent());

    private string ProcessContent()
    {
        var content = Content ?? "";
        
        if (Truncate && content.Length > MaxLength)
        {
            return content.Substring(0, MaxLength) + "...";
        }
        
        return content;
    }

    private string RenderMarkdown(string markdownContent)
    {
        // Use Markdig to render markdown to HTML
        var pipeline = new MarkdownPipelineBuilder()
            .UseAdvancedExtensions()
            .UseBootstrap()
            .Build();
            
        return Markdown.ToHtml(markdownContent, pipeline);
    }
}
